services:
  postgres:
    image: postgres:16-alpine
    container_name: timer-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TZ: ${TZ}
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 10

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: timer-bot
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    environment:
      TOKEN: ${TOKEN}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE}
      TZ: ${TZ}
      DEBUG: ${DEBUG}
    # Falls dein Bot beim Start Migrationen/Schemata ben√∂tigt und du ein SQL-Verzeichnis hast,
    # kannst du es hier mounten und im Code verwenden:
    # volumes:
    #   - ./migrations:/app/migrations:ro

volumes:
  dbdata:

